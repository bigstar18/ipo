<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" />
	
	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
	<util:properties id="APP_PROP" location="classpath:jeesite.properties" local-override="true" />
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.yrdce.ipo"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>	
	
 	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/mappings/**/*.xml" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.yrdce.ipo" />
		<property name="annotationClass" value="com.yrdce.ipo.common.dao.MyBatisDao" />
	</bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <!-- MyBatis end -->
    
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
	
	<!-- 定时器开关-->  
	<task:annotation-driven /> 
    <bean id="IPOTask" class="com.yrdce.ipo.common.task.Taskmanage"></bean>
    <bean id="SPOTask" class="com.yrdce.ipo.common.task.SPOTask"></bean>
    <bean id="brokerTask" class="com.yrdce.ipo.common.task.BrokerTask"></bean>
    <bean id="reportFormTask" class="com.yrdce.ipo.common.task.ReportFormTask"></bean>
    <bean id="deliveryTask" class="com.yrdce.ipo.common.task.DeliveryTask"></bean>
    
    <task:scheduled-tasks>  
    <!-- 这里表示的是几点开始执行任务-->  
    <!-- 申购相关任务   -->
    <!-- <task:scheduled ref="IPOTask" method="run" cron="0 5 0 * * ?" /> -->
    <task:scheduled ref="IPOTask" method="lottery" cron="0 10 0 * * ?" />
    <task:scheduled ref="IPOTask" method="ipoTransferGoodsPosition" cron="0 20 0 * * ?" />
    <task:scheduled ref="IPOTask" method="reduceeCustomerHold" cron="0 0/15 * * * ?" />
    
    <!-- 增发相关任务   -->
    <task:scheduled ref="SPOTask" method="updateSpoSateStatu" cron="0 3 0 * * ?" />
    <!-- <task:scheduled ref="SPOTask" method="runSPO" cron="0 6 0 * * ?" />  -->
    <task:scheduled ref="SPOTask" method="placing" cron="0 10 0 * * ?" />
    <task:scheduled ref="SPOTask" method="automaticFail" cron="0 15 0 * * ?" />
    <task:scheduled ref="SPOTask" method="updateStatu" cron="0 17 0 * * ?" />
    
    <!-- 交收任务 -->
    <task:scheduled ref="deliveryTask" method="cancellation" cron="0 1 0 * * ?" />
    
    <!-- 经纪会员 报表汇总相关任务   -->
    <task:scheduled ref="brokerTask" method="releasesub" cron="0 0 22 * * ?" />
	<task:scheduled ref="brokerTask" method="billoFlading" cron="0 5 22 * * ?" />
	<task:scheduled ref="brokerTask" method="delivery" cron="0 10 22 * * ?" />
	<task:scheduled ref="brokerTask" method="holdCommodity" cron="0 15 22 * * ?" />
	
	<!-- 持仓每日记录任务   -->
	<task:scheduled ref="reportFormTask" method="allHold" cron="0 30 0 * * ?" />
    </task:scheduled-tasks>
	<!-- <task:executor id="executor" pool-size="10" /> -->
	<!-- <task:scheduler id="scheduler" pool-size="10" />-->
	<!-- <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true" /> -->
    
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>	

	<!--  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false" lazy-init="false" autowire="default">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	-->
</beans>
